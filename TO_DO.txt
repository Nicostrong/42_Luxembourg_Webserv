üß† Logique G√©n√©rale du Projet

Voici la philosophie g√©n√©rale du projet Webserv :

    Lire un fichier de configuration comme nginx.conf.

    Cr√©er un ou plusieurs serveurs (virtual hosts) selon la config.

    Attendre les connexions entrantes avec des sockets.

    Accepter les connexions et recevoir des requ√™tes HTTP.

    Parser la requ√™te HTTP (GET, POST, DELETE, headers, body‚Ä¶).

    Appliquer les r√®gles de configuration (routes, m√©thodes, erreurs, etc.).

    G√©n√©rer une r√©ponse HTTP correcte (code 200, 404, etc.).

    Envoyer la r√©ponse au client.

    G√©rer plusieurs connexions via poll ou select.

    Fermer proprement les connexions et lib√©rer les ressources.

üß© √âtapes Concr√®tes √† Suivre
1. Analyse du fichier de configuration

    Lire et parser un fichier de type nginx.conf.

    Supporter les directives : server, location, listen, root, index, error_page, etc.

2. Architecture Serveur

    Cr√©er un socket d‚Äô√©coute (socket, bind, listen).

    G√©rer plusieurs sockets (si plusieurs ports sont d√©finis).

    Utiliser poll() (ou select()) pour g√©rer plusieurs connexions de mani√®re non-bloquante.

3. Connexion et R√©ception

    Accepter les connexions clients (accept).

    Lire les donn√©es envoy√©es (recv) de mani√®re non-bloquante.

4. Parsing de Requ√™te HTTP

    Lire et d√©couper la requ√™te : m√©thode, URI, headers, body.

    Supporter au minimum GET, POST, DELETE.

5. Matching avec la configuration

    Chercher le bon server block et location block correspondant √† la requ√™te.

    Appliquer les r√®gles d√©finies (redirection, racine, fichiers autoris√©s, m√©thodes autoris√©es‚Ä¶).

6. Construction de la r√©ponse

    G√©n√©rer l‚Äôen-t√™te HTTP avec le bon code (200 OK, 404 Not Found, etc.).

    Lire les fichiers statiques, ou ex√©cuter un CGI si d√©fini.

    Envoyer les donn√©es au client avec send.

7. Nettoyage et gestion des erreurs

    G√©rer les erreurs comme 400, 405, 500, etc.

    Fermer les connexions si n√©cessaire.

    G√©rer les timeout/inactivit√©.

üì¶ Classes Principales √† Pr√©voir

Voici les classes/logiques qu‚Äôil faut envisager sans entrer dans l'impl√©mentation :
Classe / Module	R√¥le principal
ConfigParser	Parser le fichier de configuration
Server	G√©rer un bloc server, cr√©er les sockets
Location	G√©rer un bloc location (m√©thodes, redirection, racine, CGI, etc.)
HTTPServer	G√©rer les sockets, la boucle d'√©v√©nement (poll)
Client	Repr√©senter un client connect√©
HTTPRequest	Parser une requ√™te HTTP re√ßue
HTTPResponse	Construire et envoyer une r√©ponse HTTP
Router	Trouver le bon server et location √† partir de la requ√™te
CGIHandler (optionnel)	Ex√©cuter un script CGI (si configur√©)
Logger (optionnel)	Afficher les logs (requ√™tes re√ßues, erreurs, etc.)
