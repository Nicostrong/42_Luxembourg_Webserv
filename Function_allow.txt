SYSTEM DE GESTION DES EVENEMENTS:

	select:
		surveille plusieurs descripteurs
		#include <sys/select.h>
		fd_set readfds;
		FD_ZERO(&readfds);
		FD_SET(sockfd, &readfds);
		select(sockfd + 1, &readfds, NULL, NULL, NULL);
	
	pool:
		surveille plusieurs descripteurs
		#include <poll.h>
		struct pollfd fds[1];
		fds[0].fd = sockfd;
		fds[0].events = POLLIN;
		poll(fds, 1, -1);
	
	epoll:
		plus rapide pour surveiller => OBJECT

		epoll_create:
			cree un objet epoll pour surveiller plusieurs descripteurs de fichiers
			int epoll_create(int size);
			size est le nombre de FD que l on veut surveiller
			retourne un FD qui defini l objet ou -1 et set errno

		epoll_ctl:
			cette methode ajoute, modifie ou supprime un fd dans l instance de l objet epoll
			int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
			epfd : Le descripteur de fichier retourné par epoll_create.
			op : L'opération à effectuer. Les valeurs possibles sont :
			    EPOLL_CTL_ADD : Ajouter un descripteur.
			    EPOLL_CTL_MOD : Modifier un descripteur existant.
    			EPOLL_CTL_DEL : Supprimer un descripteur.
			retourne 0 ou -1 en cas d erreur
		epoll_wait:
			Cette fonction attend que l'un des descripteurs surveillés devienne prêt pour une opération d'E/S.
			int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);
			epfd : Le descripteur de fichier retourné par epoll_create.
			events : Un tableau pour stocker les événements détectés.
			maxevents : Le nombre maximal d'événements qui peuvent être retournés.
			timeout : Temps d'attente en millisecondes :
				0 : Retourne immédiatement.
				-1 : Attend indéfiniment.
			retourne le nombre d evenement prets ou -1 en cas d erreur


	kqueue:
		crée une file d'événements, appelée un objet kqueue, permettant de surveiller des événements provenant de différentes sources
		int kqueue(void);
		retourne un fd representant l objet ou -1 en cas d erreur et set errno
	
	kevent:
		La fonction kevent permet d'ajouter, modifier ou surveiller des événements dans une file kqueue.
		int kevent(int kq, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);
		kq : Descripteur retourné par kqueue.
		changelist : Tableau d'événements à ajouter/modifier dans la file kqueue.
		nchanges : Nombre d'événements dans changelist.
		eventlist : Tableau où les événements détectés seront stockés.
		nevents : Taille maximale du tableau eventlist.
		timeout : Temps d'attente pour surveiller les événements.
		retourne le nombre d evenement prets ou -1 en cas d erreur

SYSTEM DE GESTION DES SIGNAUX:

	signal:
		gere les signaux
		#include <signal.h>
		void handler(int sig)
			printf("Signal %d caught!\n", sig);
		signal(SIGINT, handler);

	kill:
		envoi un signal a un processus
		kill(pid, SIGNAL);

SYSTEM DE GESTION DES ERREURS:

	errno:
		variable global contenant le dernier code erreur

	strerror/gai_strerror:
		retourne un message d erreur
		printf("Error: %s\n", strerror(errno));
		printf("Network error: %s\n", gai_strerror(EAI_FAIL));

SYSTEM DE COMMUNICATION:

	socket:
		creer un point de communication reseau
		#include <sys/socket.h>
		#include <netinet/in.h>

		int main()
		{
			int sockfd = socket(AF_INET, SOCK_STREAM, 0);
			if (sockfd == -1)
			{
				perror("socket");
				return 1;
			}
			printf("Socket created successfully\n");
			close(sockfd);
			return (0);
		}

	bind:
		associe une adresse a un socket
		struct sockaddr_in serverAddr;
		serverAddr.sin_family = AF_INET;
		serverAddr.sin_port = htons(8080);
		serverAddr.sin_addr.s_addr = INADDR_ANY;

		if (bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1)
			perror("bind");
	
	listen:
		met un socket en mode ecoute
		listen(sockfd, 5);
	
	accept:
		accepte une connection entrtante
		int clientSock = accept(sockfd, NULL, NULL);
		if (clientSock == -1)
			perror("accept");
	
	connect:
		connect un socket a un serveur
		struct sockaddr_in serverAddr;
		serverAddr.sin_family = AF_INET;
		serverAddr.sin_port = htons(8080);
		inet_pton(AF_INET, "127.0.0.1", &serverAddr.sin_addr);

		if (connect(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1)
			perror("connect");

	sed/recv:
		envoie et recoit des donnees via un socket
		send(clientSock, data, 7, 0);
		recv(cliebtSock, buffer, sizeof(buffer), 0);
	
	getaddrinfo/freeaddrinfo:
		gere les informations de resolution d adresse
		#include <netdb.h>
		struct addrinfo hints, *res;
		getaddrinfo("www.example.com", "80", &hints, &res);
		freeaddrinfo(res);
	
	htons, htonl, ntohs, ntohl:
		conversion des octets de l adresse ip ou d un port entre l ordre reserau et l ordre hote
		uint16_t port = 8080;
		uint16_t networkPort = htons(port);
		printf("Port network order: %u\n", networkPort);


	socketpair:
		La fonction socketpair permet de créer une paire de sockets connectés entre eux.
		Ces sockets peuvent être utilisés pour la communication bidirectionnelle entre deux processus
		liés ou dans un même processus.
		int socketpair(int domain, int type, int protocol, int sv[2]);
		domain : Domaine du socket (généralement AF_UNIX pour les sockets locaux).
		type : Type de socket (par exemple SOCK_STREAM ou SOCK_DGRAM).
		protocol : Protocol (doit être 0 pour les sockets locaux).
		sv : Tableau de deux descripteurs de sockets, qui seront liés entre eux.
		retourne 0 ou -1 en cas d erreur

		
	setsockopt:
		La fonction setsockopt permet de configurer les options d'un socket.
		Vous pouvez ajuster des paramètres tels que les délais d'attente,
		les tailles de buffers, ou encore activer/désactiver des fonctionnalités
		spécifiques au protocole
		int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
		sockfd : Descripteur de socket.
		level : Niveau du protocole pour les options (par exemple, SOL_SOCKET pour les options générales du socket).
		optname : Nom de l'option à configurer (exemple : SO_REUSEADDR pour autoriser la réutilisation des adresses).
		optval : Pointeur vers la valeur de l'option.
		optlen : Taille de la valeur de l'option.
		retourne 0 ou -1 en cas d erreur

	getsockname:
		La fonction getsockname permet d'obtenir l'adresse locale associée à un socket (par exemple l'adresse IP et le port).
		int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
		sockfd : Descripteur de socket.
		addr : Pointeur vers une structure sockaddr où les informations sur l'adresse seront stockées.
		addrlen : Pointeur vers la taille de la structure sockaddr.
		retourne 0 ou -1 en cas d erreur
		
	getprotobyname:
		La fonction getprotobyname permet de récupérer une structure contenant des informations sur un protocole réseau,
		en utilisant son nom (par exemple "tcp" ou "udp").
		struct protoent *getprotobyname(const char *name);
		name : Le nom du protocole (par exemple, "tcp" ou "udp").
		retourne un pointeur vers une structure protoent ou NULL en cas d erreur

SYSTEM DE PROCESS:

	fork:
		creer un nouveau process
		pid == 0 => process enfant
		pid != 0 => process parent

	execve:
		execute un programme dans un process
		execve(prog_name, args, env_var);

	waitpid:
		attend la fin d un process enfant
		waitpid(pid, NULL, 0);

SYSTEM DE FICHIER:

	open:
		ouvre un fichier et retourne un FD
		int fd = open("example.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);

	close:
		ferme un FD
		close(fd);

	read:
		lit les donnee d un FD
		read(fd, buffer, size);

	write:
		ecrit des donnees sur un fd
		write(fd, data, strlen(data));

	stat:
		permet d obtenir des infos sur un fichier
		#include <sys/stat.h>
		#include <stdio.h>

		int main()
		{
			struct stat	fileStat;
			if (stat("example.txt", &fileStat) == -1)
			{
				perror("stat");
				return 1;
			}
			printf("File size: %ld bytes\n", fileStat.st_size);
			return (0);
		}

	access:
		verifie l acces a un fichier
		if (access(file, F_OK) == 0) ...
		F_OK => file existe
		R_OK => file can be readable
		W_OK => file can be writable
		X_OK => file can be executable

	opendir/readdir/closedir:
		opere sur un repertoire ouvre/lit/ferme
		#include <dirent.h>
		#include <stdio.h>

		int main()
		{
			DIR				*dir = opendir(".");
			if (!dir)
			{
				perror("opendir");
				return 1;
			}
			struct dirent	*entry;
			while ((entry = readdir(dir)) != NULL)
				printf("%s\n", entry->d_name);
			closedir(dir);
			return (0);
		}