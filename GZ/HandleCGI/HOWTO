Key Points for CGI Handling in a C++98 Server
1. CGI Basics

Purpose: CGI (Common Gateway Interface) allows an HTTP server to run external programs (scripts) to handle web requests.

Roles: The server manages connections and transport; the CGI script handles application logic and response generation.

2. Environment Variables (Meta-Variables)

How Data is Passed: The server sets environment variables that the CGI script can access.

Key Variables:

AUTH_TYPE: Type of authentication used (if any).

CONTENT_LENGTH: Length of the request body (for POST requests).

CONTENT_TYPE: MIME type of the request body (for POST requests).

GATEWAY_INTERFACE: Version of CGI being used (e.g., "CGI/1.1").

PATH_INFO: Extra path information after the script name.

PATH_TRANSLATED: Translated version of PATH_INFO (filesystem path).

QUERY_STRING: Data from the URL after the "?" (for GET requests).

REMOTE_ADDR: IP address of the client.

REMOTE_HOST: Hostname of the client (if available).

REMOTE_IDENT: Remote user name (if available, rarely used).

REMOTE_USER: Authenticated user name (if applicable).

REQUEST_METHOD: HTTP method (GET, POST, etc.).

SCRIPT_NAME: Path to the script being executed.

SERVER_NAME: Server's hostname or IP.

SERVER_PORT: Port number the server is listening on.

SERVER_PROTOCOL: Protocol and version (e.g., "HTTP/1.1").

SERVER_SOFTWARE: Name and version of the server software.

3. Script Execution

How it Works: The server runs the script as a separate process, setting environment variables as above.

Input: For POST requests, the server sends the request body to the script's standard input.

Output: The script writes its response to standard output (headers first, then body).

4. Response Handling

Headers: The script must output HTTP headers (e.g., Content-Type, Status) before the response body.

Body: After headers, the script outputs the response body.

Special Cases: Redirects and non-parsed headers (NPH scripts) are also supported.

5. Security and Best Practices

Sanitize Input: Always validate and sanitize user input from environment variables and request body.

Environment Variables: Not all are guaranteed to be set; handle missing values gracefully.

Stateless Processing: Each request is independent; scripts should not rely on previous requests.

Quick Checklist for Implementation
Set environment variables (as listed above) before launching the CGI script.

Pass request body to the script's standard input for POST requests.

Capture output from the script's standard output (headers and body).

Parse headers and send them, followed by the body, to the client.

Handle errors and missing environment variables robustly.

This covers the essentials for implementing basic CGI handling in your C++98 server, following RFC 3875